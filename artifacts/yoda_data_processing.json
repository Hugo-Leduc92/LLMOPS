{
  "components": {
    "comp-data-transformation-component": {
      "executorLabel": "exec-data-transformation-component",
      "inputDefinitions": {
        "parameters": {
          "assistant_column": {
            "defaultValue": "translation",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "assistant_fallback_column": {
            "defaultValue": "translation_extra",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "emit_both_variants": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "input_gcs_csv_uri": {
            "parameterType": "STRING"
          },
          "prefer_extra": {
            "defaultValue": true,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "random_seed": {
            "defaultValue": 42.0,
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "test_size": {
            "defaultValue": 0.2,
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "user_column": {
            "defaultValue": "sentence",
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "test_output_path": {
            "parameterType": "STRING"
          },
          "train_output_path": {
            "parameterType": "STRING"
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-data-transformation-component": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "data_transformation_component"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas>=2.3.2' 'datasets==4.0.0' 'gcsfs'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef data_transformation_component(\n    input_gcs_csv_uri: str,\n    user_column: str = \"sentence\",\n    assistant_column: str = \"translation\",\n    assistant_fallback_column: str = \"translation_extra\",\n    prefer_extra: bool = True,\n    emit_both_variants: bool = False,\n    test_size: float = 0.2,\n    random_seed: int = 42,\n    train_output_path: OutputPath(str) = \"\",\n    test_output_path: OutputPath(str) = \"\",\n) -> None:\n    \"\"\"Format and split Yoda Sentences for Phi-3 fine-tuning.\n\n    - Chooses assistant text from `translation_extra` when `prefer_extra=True`, otherwise `translation`.\n    - Optionally emits both variants per row when `emit_both_variants=True`.\n    \"\"\"\n    import logging\n    import json\n    import pandas as pd\n    from datasets import Dataset\n\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    logger.info(\"Starting data transformation process...\")\n\n    logger.info(f\"Reading from {input_gcs_csv_uri}\")\n    df = pd.read_csv(input_gcs_csv_uri)\n\n    # Validate columns\n    expected = {user_column}\n    if assistant_column:\n        expected.add(assistant_column)\n    if assistant_fallback_column:\n        expected.add(assistant_fallback_column)\n    missing = [c for c in expected if c not in df.columns]\n    if missing:\n        raise ValueError(f\"Missing expected columns: {missing}\")\n\n    # Build conversations using selected assistant column\n    conversations = []\n    for _, row in df.iterrows():\n        user_text = str(row[user_column])\n        primary_ok = assistant_column in df.columns and pd.notna(row[assistant_column])\n        extra_ok = assistant_fallback_column in df.columns and pd.notna(row[assistant_fallback_column])\n\n        if prefer_extra and extra_ok:\n            assistant_text = str(row[assistant_fallback_column])\n        elif primary_ok:\n            assistant_text = str(row[assistant_column])\n        elif extra_ok:\n            assistant_text = str(row[assistant_fallback_column])\n        else:\n            assistant_text = \"\"\n\n        conversations.append([\n            {\"role\": \"user\", \"content\": user_text},\n            {\"role\": \"assistant\", \"content\": assistant_text},\n        ])\n\n        if emit_both_variants and primary_ok and extra_ok:\n            other_text = str(row[assistant_column]) if prefer_extra else str(row[assistant_fallback_column])\n            conversations.append([\n                {\"role\": \"user\", \"content\": user_text},\n                {\"role\": \"assistant\", \"content\": other_text},\n            ])\n\n    ds = Dataset.from_dict({\"messages\": [json.dumps(conv) for conv in conversations]})\n    logger.info(\"Splitting dataset: test_size=%.2f seed=%d\", test_size, random_seed)\n    split = ds.train_test_split(test_size=test_size, seed=random_seed)\n\n    # Write outputs\n    train_df = pd.DataFrame({\"messages\": split[\"train\"][\"messages\"]})\n    test_df = pd.DataFrame({\"messages\": split[\"test\"][\"messages\"]})\n    logger.info(f\"Writing train dataset to {train_output_path}...\")\n    train_df.to_csv(train_output_path, index=False)\n    logger.info(f\"Writing test dataset to {test_output_path}...\")\n    test_df.to_csv(test_output_path, index=False)\n    logger.info(\"Data transformation process completed successfully\")\n\n"
          ],
          "image": "python:3.11-slim"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "yoda-data-processing-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "data-transformation-component": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-data-transformation-component"
          },
          "inputs": {
            "parameters": {
              "assistant_column": {
                "componentInputParameter": "assistant_column"
              },
              "assistant_fallback_column": {
                "componentInputParameter": "assistant_fallback_column"
              },
              "emit_both_variants": {
                "componentInputParameter": "emit_both_variants"
              },
              "input_gcs_csv_uri": {
                "componentInputParameter": "input_gcs_csv_uri"
              },
              "prefer_extra": {
                "componentInputParameter": "prefer_extra"
              },
              "user_column": {
                "componentInputParameter": "user_column"
              }
            }
          },
          "taskInfo": {
            "name": "data-transformation-component"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "assistant_column": {
          "defaultValue": "translation",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "assistant_fallback_column": {
          "defaultValue": "translation_extra",
          "isOptional": true,
          "parameterType": "STRING"
        },
        "emit_both_variants": {
          "defaultValue": false,
          "isOptional": true,
          "parameterType": "BOOLEAN"
        },
        "input_gcs_csv_uri": {
          "parameterType": "STRING"
        },
        "prefer_extra": {
          "defaultValue": true,
          "isOptional": true,
          "parameterType": "BOOLEAN"
        },
        "user_column": {
          "defaultValue": "sentence",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.14.6"
}